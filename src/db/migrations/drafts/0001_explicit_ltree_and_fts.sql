-- Migration Draft: Explicit Retrieval Foundations (ltree + FTS)
-- Purpose: Prepare schema for hierarchical explicit retrieval and fast FTS
-- Note: This is a DRAFT and is not wired into Alembic migrations yet.
-- Execute manually in a staging environment before promoting to production.

BEGIN;

-- 1) Ensure required extensions
CREATE EXTENSION IF NOT EXISTS ltree;
CREATE EXTENSION IF NOT EXISTS pg_trgm;
CREATE EXTENSION IF NOT EXISTS unaccent;
-- vector extension may already be enabled depending on your setup
DO $$ BEGIN
  PERFORM 1 FROM pg_extension WHERE extname = 'vector';
  IF NOT FOUND THEN
    -- Skip if not available; your environment may enable this separately
    RAISE NOTICE 'vector extension not installed; skipping';
  END IF;
END $$;

-- 2) Table assumptions
-- Assuming main table is legal_units with primary key unit_id (UUID or BIGINT) and existing content fields
-- Adjust names if your model differs.

-- 3) Add hierarchical path and parent reference
ALTER TABLE legal_units
  ADD COLUMN IF NOT EXISTS unit_path ltree,
  ADD COLUMN IF NOT EXISTS parent_unit_id UUID NULL;

-- 4) Add tsvector for content search (optionally generated by trigger)
ALTER TABLE legal_units
  ADD COLUMN IF NOT EXISTS tsv_content tsvector;

-- 5) Foreign key for parent reference (self-referential)
DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints
    WHERE constraint_name = 'legal_units_parent_fk'
  ) THEN
    ALTER TABLE legal_units
      ADD CONSTRAINT legal_units_parent_fk
      FOREIGN KEY (parent_unit_id) REFERENCES legal_units(unit_id)
      ON DELETE SET NULL;
  END IF;
END $$;

-- 6) Indexes
-- Hierarchy traversal
CREATE INDEX IF NOT EXISTS legal_units_unit_path_gist
  ON legal_units USING GIST (unit_path);

-- FTS index (general Indonesian + unaccent)
CREATE INDEX IF NOT EXISTS legal_units_tsv_content_gin
  ON legal_units USING GIN (tsv_content);

-- Optional trigram index for LIKE/ILIKE fuzzy matching on title or number fields
-- CREATE INDEX IF NOT EXISTS legal_units_title_trgm ON legal_units USING GIN (unaccent(title) gin_trgm_ops);

-- 7) Trigger to keep tsv_content up to date
-- Adjust language configuration (e.g., 'indonesian') and fields to concatenate as needed
DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'legal_units_tsvector_update'
  ) THEN
    CREATE FUNCTION legal_units_tsvector_update() RETURNS trigger AS $$
    BEGIN
      NEW.tsv_content :=
        setweight(to_tsvector('indonesian', coalesce(NEW.title, '')), 'A') ||
        setweight(to_tsvector('indonesian', coalesce(NEW.subtitle, '')), 'B') ||
        setweight(to_tsvector('indonesian', coalesce(NEW.content, '')), 'C');
      RETURN NEW;
    END
    $$ LANGUAGE plpgsql;

    CREATE TRIGGER legal_units_tsvector_update
    BEFORE INSERT OR UPDATE OF title, subtitle, content ON legal_units
    FOR EACH ROW EXECUTE PROCEDURE legal_units_tsvector_update();
  END IF;
END $$;

-- 8) Backfill plan (manual; not executed here)
-- - Populate parent_unit_id using existing hierarchy relations if available (e.g., from unit_number and parent mapping).
-- - Derive unit_path (ltree) using deterministic labels, e.g., 'uu.1.pasal.12.ayat.3.huruf.b'
--   Example backfill pseudo:
--   UPDATE legal_units SET unit_path = text2ltree(
--       'uu.'||uu_number||'.pasal.'||pasal_number||COALESCE('.ayat.'||ayat_number,'')||COALESCE('.huruf.'||huruf_letter,'')
--   );
-- - Recompute tsv_content by running: UPDATE legal_units SET title = title; (to trigger function) or explicit UPDATE to set tsv_content.

COMMIT;
